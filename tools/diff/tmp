5c5
< #include <thumips.h>
---
> #include <arch.h>
17a18
> #include <mips_io.h>
23,26c24,25
< static void print_ticks() {
<     PRINT_HEX("%d ticks\n",TICK_NUM);
< }
< 
---
> #define current (pls_read(current))
> #define idleproc (pls_read(idleproc))
27a27,30
> static void print_ticks()
> {
> 	PRINT_HEX("%d ticks\n", TICK_NUM);
> }
29,54c32,52
< static const char *
< trapname(int trapno) {
<     static const char * const excnames[] = {
<         "Interrupt",
<         "TLB Modify",
<         "TLB miss on load",
<         "TLB miss on store",
<         "Address error on load",
<         "Address error on store",
<         "Bus error on instruction fetch",
<         "Bus error on data load or store",
<         "Syscall",
<         "Breakpoint",
<         "Reserved (illegal) instruction",
<         "Coprocessor unusable",
<         "Arithmetic overflow",
<     };
<     if(trapno <= 12)
<       return excnames[trapno];
<     else
<       return "Unknown";
< }
< 
< bool
< trap_in_kernel(struct trapframe *tf) {
<   return !(tf->tf_status & KSU_USER);
---
> static const char *trapname(int trapno)
> {
> 	static const char *const excnames[] = {
> 		"Interrupt",
> 		"TLB Modify",
> 		"TLB miss on load",
> 		"TLB miss on store",
> 		"Address error on load",
> 		"Address error on store",
> 		"Bus error on instruction fetch",
> 		"Bus error on data load or store",
> 		"Syscall",
> 		"Breakpoint",
> 		"Reserved (illegal) instruction",
> 		"Coprocessor unusable",
> 		"Arithmetic overflow",
> 	};
> 	if (trapno <= 12)
> 		return excnames[trapno];
> 	else
> 		return "Unknown";
56a55,58
> bool trap_in_kernel(struct trapframe * tf)
> {
> 	return !(tf->tf_status & KSU_USER);
> }
60,92c62,87
<   int i;
<   for (i = 0; i < 30; i++) {
<     kprintf(" $");
<     printbase10(i+1);
<     kprintf("\t: ");
<     printhex(regs->reg_r[i]);
<     kputchar('\n');
<   }
< }
< 
< void
< print_trapframe(struct trapframe *tf) {
<     PRINT_HEX("trapframe at ", tf);
<     print_regs(&tf->tf_regs);
<     PRINT_HEX(" $ra\t: ", tf->tf_ra);
<     PRINT_HEX(" BadVA\t: ", tf->tf_vaddr);
<     PRINT_HEX(" Status\t: ", tf->tf_status);
<     PRINT_HEX(" Cause\t: ", tf->tf_cause);
<     PRINT_HEX(" EPC\t: ", tf->tf_epc);
<     if (!trap_in_kernel(tf)) {
<       kprintf("Trap in usermode: ");
<     }else{
<       kprintf("Trap in kernel: ");
<     }
<     kprintf(trapname(GET_CAUSE_EXCODE(tf->tf_cause)));
<     kputchar('\n'); 
<  //   /*
<     int i;
<     for (i = 0; i < 20; ++i) {
<         int *addr = (int*)(tf->tf_epc + i * 4);
<         kprintf("0x%08x=0x%08x\n", addr, *addr);
<     }
<  //   */
---
> 	int i;
> 	for (i = 0; i < 30; i++) {
> 		kprintf(" $");
> 		printbase10(i + 1);
> 		kprintf("\t: ");
> 		printhex(regs->reg_r[i]);
> 		kputchar('\n');
> 	}
> }
> 
> void print_trapframe(struct trapframe *tf)
> {
> 	PRINT_HEX("trapframe at ", tf);
> 	print_regs(&tf->tf_regs);
> 	PRINT_HEX(" $ra\t: ", tf->tf_ra);
> 	PRINT_HEX(" BadVA\t: ", tf->tf_vaddr);
> 	PRINT_HEX(" Status\t: ", tf->tf_status);
> 	PRINT_HEX(" Cause\t: ", tf->tf_cause);
> 	PRINT_HEX(" EPC\t: ", tf->tf_epc);
> 	if (!trap_in_kernel(tf)) {
> 		kprintf("Trap in usermode: ");
> 	} else {
> 		kprintf("Trap in kernel: ");
> 	}
> 	kprintf(trapname(GET_CAUSE_EXCODE(tf->tf_cause)));
> 	kputchar('\n');
97,120c92,114
<   extern clock_int_handler(void*);
<   extern serial_int_handler(void*);
<   extern keyboard_int_handler();
<   int i;
<   for(i=0;i<8;i++){
<     if(tf->tf_cause & (1<<(CAUSEB_IP+i))){
<       switch(i){
<         case TIMER0_IRQ:
<           clock_int_handler(NULL);
<           break;
<         case COM1_IRQ:
<           //kprintf("COM1_IRQ!\n");
<           serial_int_handler(NULL);
<           break;
<         case KEYBOARD_IRQ:
<           //kprintf("KEYBOARD\n");
<           keyboard_int_handler();
<           break;
<         default:
<           print_trapframe(tf);
<           panic("Unknown interrupt!");
<       }
<     }
<   }
---
> 	extern clock_int_handler(void *);
> 	extern serial_int_handler(void *);
>         extern keyboard_int_handler();
> 	int i;
> 	for (i = 0; i < 8; i++) {
> 		if (tf->tf_cause & (1 << (CAUSEB_IP + i))) {
> 			switch (i) {
> 			case TIMER0_IRQ:
> 				clock_int_handler(NULL);
> 				break;
> 			case COM1_IRQ:
> 				serial_int_handler(NULL);
> 				break;
>                         case KEYBOARD_IRQ:
>                                 //kprintf("KEYBOARD\n");
>                                 keyboard_int_handler();
>                                 break;
> 			default:
> 				print_trapframe(tf);
> 				panic("Unknown interrupt!");
> 			}
> 		}
> 	}
126,128c120
< 
< 
< static inline int get_error_code(int write, pte_t *pte)
---
> static inline int get_error_code(int write, pte_t * pte)
130,135c122,127
<   int r = 0;
<   if(pte!=NULL && ptep_present(pte))
<     r |= 0x01;
<   if(write)
<     r |= 0x02;
<   return r;
---
> 	int r = 0;
> 	if (pte != NULL && ptep_present(pte))
> 		r |= 0x01;
> 	if (write)
> 		r |= 0x02;
> 	return r;
139c131,132
< pgfault_handler(struct trapframe *tf, uint32_t addr, uint32_t error_code) {
---
> pgfault_handler(struct trapframe *tf, uint32_t addr, uint32_t error_code)
> {
141,145c134,138
<     extern struct mm_struct *check_mm_struct;
<     if (check_mm_struct != NULL) {
<         return do_pgfault(check_mm_struct, error_code, addr);
<     }
<     panic("unhandled page fault.\n");
---
> 	extern struct mm_struct *check_mm_struct;
> 	if (check_mm_struct != NULL) {
> 		return do_pgfault(check_mm_struct, error_code, addr);
> 	}
> 	panic("unhandled page fault.\n");
147,164c140,156
<   extern struct mm_struct *check_mm_struct;
<   if(check_mm_struct !=NULL) { //used for test check_swap
<     //print_pgfault(tf);
<   }
<   struct mm_struct *mm;
<   if (check_mm_struct != NULL) {
<     assert(current == idleproc);
<     mm = check_mm_struct;
<   }
<   else {
<     if (current == NULL) {
<       print_trapframe(tf);
<       //print_pgfault(tf);
<       panic("unhandled page fault.\n");
<     }
<     mm = current->mm;
<   }
<   return do_pgfault(mm, error_code, addr);
---
> 	extern struct mm_struct *check_mm_struct;
> 	if (check_mm_struct != NULL) {	//used for test check_swap
> 		//print_pgfault(tf);
> 	}
> 	struct mm_struct *mm;
> 	if (check_mm_struct != NULL) {
> 		assert(current == idleproc);
> 		mm = check_mm_struct;
> 	} else {
> 		if (current == NULL) {
> 			print_trapframe(tf);
> 			//print_pgfault(tf);
> 			panic("unhandled page fault.\n");
> 		}
> 		mm = current->mm;
> 	}			//kprintf("  (do_pgfault(%x,%d,%x))  ", mm, error_code, addr);
> 	return do_pgfault(mm, error_code, addr);
168c160
< static void handle_tlbmiss(struct trapframe* tf, int write)
---
> static void handle_tlbmiss(struct trapframe *tf, int write)//YX , int perm)
171,174c163,166
<   if(!trap_in_kernel(tf)){
<     print_trapframe(tf);
<     while(1);
<   }
---
> 	if (!trap_in_kernel(tf)) {
> 		print_trapframe(tf);
> 		while (1) ;
> 	}
177,213c169,206
<   static int entercnt = 0;
<   entercnt ++;
<   //kprintf("## enter handle_tlbmiss %d times\n", entercnt);
<   int in_kernel = trap_in_kernel(tf);
<   assert(current_pgdir != NULL);
<   //print_trapframe(tf);
<   uint32_t badaddr = tf->tf_vaddr;
<   int ret = 0;
<   pte_t *pte = get_pte(current_pgdir, tf->tf_vaddr, 0);
<   if(pte==NULL || ptep_invalid(pte)){   //PTE miss, pgfault
<     //panic("unimpl");
<     //TODO
<     //tlb will not be refill in do_pgfault,
<     //so a vmm pgfault will trigger 2 exception
<     //permission check in tlb miss
<     ret = pgfault_handler(tf, badaddr, get_error_code(write, pte));
<   }else{ //tlb miss only, reload it
<     /* refill two slot */
<     /* check permission */
<     if(in_kernel){
<       tlb_refill(badaddr, pte); 
<     //kprintf("## refill K\n");
<       return;
<     }else{
<       if(!ptep_u_read(pte)){
<         ret = -1;
<         goto exit;
<       }
<       if(write && !ptep_u_write(pte)){
<         ret = -2;
<         goto exit;
<       }
<     //kprintf("## refill U %d %08x\n", write, badaddr);
<       tlb_refill(badaddr, pte);
<       return ;
<     }
<   }
---
> 	static int entercnt = 0;
> 	entercnt++;
> 	//kprintf("## enter handle_tlbmiss %d times\n", entercnt);
> 	int in_kernel = trap_in_kernel(tf);
> 	assert(current_pgdir != NULL);
> 	//print_trapframe(tf);
> 	uint32_t badaddr = tf->tf_vaddr;
> 	int ret = 0;
> 	pte_t *pte = get_pte(current_pgdir, tf->tf_vaddr, 0);
> 	//perm ||  || (write && !ptep_u_write(pte))
> 	if (pte == NULL || ptep_invalid(pte)) {	//PTE miss, pgfault
> 		//panic("unimpl");
> 		//TODO
> 		//tlb will not be refill in do_pgfault,
> 		//so a vmm pgfault will trigger 2 exception
> 		//permission check in tlb miss
> 		ret = pgfault_handler(tf, badaddr, get_error_code(write, pte));
> 	} else {		//tlb miss only, reload it
> 		/* refill two slot */
> 		/* check permission */
> 		if (in_kernel) {
> 			tlb_refill(badaddr, pte);
> 			//kprintf("## refill K\n");
> 			return;
> 		} else {
> 			if (!ptep_u_read(pte)) {
> 				ret = -1;
> 				goto exit;
> 			}
> 			if (write && !ptep_u_write(pte)) {
> 				ret = -2;
> 				goto exit;
> 			}
> 			//kprintf("## refill U %d %08x\n", write, badaddr);
> 			tlb_refill(badaddr, pte);
> 			return;
> 		}
> 	}
216,267c209,217
<   if(ret){
<     print_trapframe(tf);
<     if(in_kernel){
<       panic("unhandled pgfault");
<     }else{
<       do_exit(-E_KILLED);
<     }
<   }
<   return ;
< }
< 
< static void
< trap_dispatch(struct trapframe *tf) {
<   int code = GET_CAUSE_EXCODE(tf->tf_cause);
<   switch(code){
<     case EX_IRQ:
<       interrupt_handler(tf);
<       break;
<     case EX_TLBL:
<       handle_tlbmiss(tf, 0);
<       break;
<     case EX_TLBS:
<       handle_tlbmiss(tf, 1);
<       break;
<     case EX_RI:
<       print_trapframe(tf);
<       kprintf("inst not include, I will use software to implement\n");
<       tf->tf_epc += 4;
<       //panic("hey man! Do NOT use that insn!");
<       break;
<     case EX_SYS:
<       //print_trapframe(tf);
<       tf->tf_epc += 4;
<       syscall();
<       break;
<       /* alignment error or access kernel
<        * address space in user mode */
<     case EX_ADEL:
<     case EX_ADES:
<       if(trap_in_kernel(tf)){
<         print_trapframe(tf);
<         panic("Alignment Error");
<       }else{
<         print_trapframe(tf);
<         do_exit(-E_KILLED);
<       }
<       break;
<     default:
<       print_trapframe(tf);
<       panic("Unhandled Exception");
<   }
< 
---
> 	if (ret) {
> 		print_trapframe(tf);
> 		if (in_kernel) {
> 			panic("unhandled pgfault");
> 		} else {
> 			do_exit(-E_KILLED);
> 		}
> 	}
> 	return;
269a220,268
> static void trap_dispatch(struct trapframe *tf)
> {
> 	int i;
> 	int code = GET_CAUSE_EXCODE(tf->tf_cause);
> 	switch (code) {
> 	case EX_IRQ:
> 		interrupt_handler(tf);
> 		break;
> 	//case EX_MOD:
> 	//	handle_tlbmiss(tf, 1, 1);
> 	//	break;
> 	case EX_TLBL:
> 		handle_tlbmiss(tf, 0);//, 0);//YX
> 		break;
> 	case EX_TLBS:
> 		handle_tlbmiss(tf, 1);//, 0);
> 		break;
> 	case EX_RI:
> 		print_trapframe(tf);
> 		uint32_t *addr = (uint32_t *) (tf->tf_epc);
> 		for (i = 0; i < 10; ++i, addr++)
> 			kprintf("[%x:%x]\n", addr, *addr);
> 
> 		panic("hey man! Do NOT use that insn! insn=%x",
> 		      *(uint32_t *) (tf->tf_epc));
> 		break;
> 	case EX_SYS:
> 		//print_trapframe(tf);
> 		tf->tf_epc += 4;
> 		syscall();
> 		break;
> 		/* alignment error or access kernel
> 		 * address space in user mode */
> 	case EX_ADEL:
> 	case EX_ADES:
> 		if (trap_in_kernel(tf)) {
> 			print_trapframe(tf);
> 			panic("Alignment Error");
> 		} else {
> 			print_trapframe(tf);
> 			do_exit(-E_KILLED);
> 		}
> 		break;
> 	default:
> 		print_trapframe(tf);
> 		panic("Unhandled Exception");
> 	}
> 
> }
276,302c275,307
<   void
< mips_trap(struct trapframe *tf)
< {//kprintf("mips_trap:epc=0x%x cause=%x badvaddr=0x%08x\n", tf->tf_epc, (tf->tf_cause >> 2) & 0x1F, tf->tf_vaddr);
<   // dispatch based on what type of trap occurred
<   // used for previous projects
<   if (current == NULL) {
<     trap_dispatch(tf);
<   }
<   else {
<     // keep a trapframe chain in stack
<     struct trapframe *otf = current->tf;
<     current->tf = tf;
< 
<     bool in_kernel = trap_in_kernel(tf);
< 
<     trap_dispatch(tf);
< 
<     current->tf = otf;
<     if (!in_kernel) {
<       if (current->flags & PF_EXITING) {
<         do_exit(-E_KILLED);
<       }
<       if (current->need_resched) {
<         schedule();
<       }
<     }
<   }
---
> void mips_trap(struct trapframe *tf)
> {
> 	static int flag = 0;
> 	if (((tf->tf_cause >> 2) & 0x1F) != 0) {
> //    kprintf(" [trap: epc=%x cause=%d syscall=%d badvaddr=%x pid=%d current_pgdir=%x] ", tf->tf_epc, (tf->tf_cause >> 2) & 0x1F, (unsigned)(tf->tf_regs.reg_r[MIPS_REG_V0]), tf->tf_vaddr, current?current->pid:-1, current_pgdir);
> 		flag = 1;
> 	} else
> 		flag = 0;
> 
> 	// dispatch based on what type of trap occurred
> 	// used for previous projects
> 	if (current == NULL) {
> 		trap_dispatch(tf);
> 	} else {
> 		// keep a trapframe chain in stack
> 		struct trapframe *otf = current->tf;
> 		current->tf = tf;
> 
> 		bool in_kernel = trap_in_kernel(tf);
> 
> 		trap_dispatch(tf);
> 
> 		current->tf = otf;
> 		if (!in_kernel) {
> 			if (current->flags & PF_EXITING) {
> 				do_exit(-E_KILLED);
> 			}
> 			if (current->need_resched) {
> 				schedule();
> 			}
> 		}
> 	}
> //  if (flag) kprintf(" [end: epc=%x cause=%d syscall=%d pid=%d] ", tf->tf_epc, (tf->tf_cause >> 2) & 0x1F, (unsigned)(tf->tf_regs.reg_r[MIPS_REG_V0]), current?current->pid:-1);
304a310,315
> //add by HHL
> int ucore_in_interrupt()
> {
> 	//panic("ucore_in_interrupt()");
> 	return 0;
> }
